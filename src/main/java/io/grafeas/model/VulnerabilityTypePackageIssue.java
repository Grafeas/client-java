/*
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.grafeas.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.grafeas.model.VulnerabilityTypeVulnerabilityLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * This message wraps a location affected by a vulnerability and its associated fix (if one is available).
 */
@ApiModel(description = "This message wraps a location affected by a vulnerability and its associated fix (if one is available).")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-04T13:20:14.121-07:00")
public class VulnerabilityTypePackageIssue {
  @SerializedName("affected_location")
  private VulnerabilityTypeVulnerabilityLocation affectedLocation = null;

  @SerializedName("fixed_location")
  private VulnerabilityTypeVulnerabilityLocation fixedLocation = null;

  @SerializedName("severity_name")
  private String severityName = null;

  public VulnerabilityTypePackageIssue affectedLocation(VulnerabilityTypeVulnerabilityLocation affectedLocation) {
    this.affectedLocation = affectedLocation;
    return this;
  }

   /**
   * The location of the vulnerability.
   * @return affectedLocation
  **/
  @ApiModelProperty(value = "The location of the vulnerability.")
  public VulnerabilityTypeVulnerabilityLocation getAffectedLocation() {
    return affectedLocation;
  }

  public void setAffectedLocation(VulnerabilityTypeVulnerabilityLocation affectedLocation) {
    this.affectedLocation = affectedLocation;
  }

  public VulnerabilityTypePackageIssue fixedLocation(VulnerabilityTypeVulnerabilityLocation fixedLocation) {
    this.fixedLocation = fixedLocation;
    return this;
  }

   /**
   * The location of the available fix for vulnerability.
   * @return fixedLocation
  **/
  @ApiModelProperty(value = "The location of the available fix for vulnerability.")
  public VulnerabilityTypeVulnerabilityLocation getFixedLocation() {
    return fixedLocation;
  }

  public void setFixedLocation(VulnerabilityTypeVulnerabilityLocation fixedLocation) {
    this.fixedLocation = fixedLocation;
  }

  public VulnerabilityTypePackageIssue severityName(String severityName) {
    this.severityName = severityName;
    return this;
  }

   /**
   * The severity (eg: distro assigned severity) for this vulnerability.
   * @return severityName
  **/
  @ApiModelProperty(value = "The severity (eg: distro assigned severity) for this vulnerability.")
  public String getSeverityName() {
    return severityName;
  }

  public void setSeverityName(String severityName) {
    this.severityName = severityName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityTypePackageIssue vulnerabilityTypePackageIssue = (VulnerabilityTypePackageIssue) o;
    return Objects.equals(this.affectedLocation, vulnerabilityTypePackageIssue.affectedLocation) &&
        Objects.equals(this.fixedLocation, vulnerabilityTypePackageIssue.fixedLocation) &&
        Objects.equals(this.severityName, vulnerabilityTypePackageIssue.severityName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedLocation, fixedLocation, severityName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityTypePackageIssue {\n");
    
    sb.append("    affectedLocation: ").append(toIndentedString(affectedLocation)).append("\n");
    sb.append("    fixedLocation: ").append(toIndentedString(fixedLocation)).append("\n");
    sb.append("    severityName: ").append(toIndentedString(severityName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

