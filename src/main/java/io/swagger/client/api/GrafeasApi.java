/**
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.grafeas.ApiCallback;
import io.grafeas.ApiClient;
import io.grafeas.ApiException;
import io.grafeas.ApiResponse;
import io.grafeas.Configuration;
import io.grafeas.Pair;
import io.grafeas.ProgressRequestBody;
import io.grafeas.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.grafeas.client.Note;
import io.grafeas.client.Occurrence;
import io.grafeas.client.Empty;
import io.grafeas.client.Operation;
import io.grafeas.client.ListNoteOccurrencesResponse;
import io.grafeas.client.ListNotesResponse;
import io.grafeas.client.ListOccurrencesResponse;
import io.grafeas.client.ListOperationsResponse;
import io.grafeas.client.UpdateOperationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GrafeasApi {
    private ApiClient apiClient;

    public GrafeasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GrafeasApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createNote */
    private com.squareup.okhttp.Call createNoteCall(String projectsId, String noteId, Note note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = note;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling createNote(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/notes".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (noteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "noteId", noteId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Creates a new note.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;project/{project_id} (required)
     * @param noteId The ID to use for this note. (optional)
     * @param note The Note to be inserted (optional)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note createNote(String projectsId, String noteId, Note note) throws ApiException {
        ApiResponse<Note> resp = createNoteWithHttpInfo(projectsId, noteId, note);
        return resp.getData();
    }

    /**
     * 
     * Creates a new note.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;project/{project_id} (required)
     * @param noteId The ID to use for this note. (optional)
     * @param note The Note to be inserted (optional)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> createNoteWithHttpInfo(String projectsId, String noteId, Note note) throws ApiException {
        com.squareup.okhttp.Call call = createNoteCall(projectsId, noteId, note, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new note.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;project/{project_id} (required)
     * @param noteId The ID to use for this note. (optional)
     * @param note The Note to be inserted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNoteAsync(String projectsId, String noteId, Note note, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNoteCall(projectsId, noteId, note, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createOccurrence */
    private com.squareup.okhttp.Call createOccurrenceCall(String projectsId, Occurrence occurrence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = occurrence;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling createOccurrence(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/occurrences".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Creates a new occurrence.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;projects/{project_id}\&quot; (required)
     * @param occurrence The occurrence to be inserted (optional)
     * @return Occurrence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Occurrence createOccurrence(String projectsId, Occurrence occurrence) throws ApiException {
        ApiResponse<Occurrence> resp = createOccurrenceWithHttpInfo(projectsId, occurrence);
        return resp.getData();
    }

    /**
     * 
     * Creates a new occurrence.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;projects/{project_id}\&quot; (required)
     * @param occurrence The occurrence to be inserted (optional)
     * @return ApiResponse&lt;Occurrence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Occurrence> createOccurrenceWithHttpInfo(String projectsId, Occurrence occurrence) throws ApiException {
        com.squareup.okhttp.Call call = createOccurrenceCall(projectsId, occurrence, null, null);
        Type localVarReturnType = new TypeToken<Occurrence>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new occurrence.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;projects/{project_id}\&quot; (required)
     * @param occurrence The occurrence to be inserted (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOccurrenceAsync(String projectsId, Occurrence occurrence, final ApiCallback<Occurrence> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOccurrenceCall(projectsId, occurrence, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Occurrence>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteNote */
    private com.squareup.okhttp.Call deleteNoteCall(String projectsId, String notesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling deleteNote(Async)");
        }
        
        // verify the required parameter 'notesId' is set
        if (notesId == null) {
            throw new ApiException("Missing the required parameter 'notesId' when calling deleteNote(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/notes/{notesId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()))
        .replaceAll("\\{" + "notesId" + "\\}", apiClient.escapeString(notesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Deletes the given note from the system.
     * @param projectsId Part of &#x60;name&#x60;. The name of the note in the form \&quot;projects/{project_id}/notes/{note_id}\&quot; (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty deleteNote(String projectsId, String notesId) throws ApiException {
        ApiResponse<Empty> resp = deleteNoteWithHttpInfo(projectsId, notesId);
        return resp.getData();
    }

    /**
     * 
     * Deletes the given note from the system.
     * @param projectsId Part of &#x60;name&#x60;. The name of the note in the form \&quot;projects/{project_id}/notes/{note_id}\&quot; (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> deleteNoteWithHttpInfo(String projectsId, String notesId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNoteCall(projectsId, notesId, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the given note from the system.
     * @param projectsId Part of &#x60;name&#x60;. The name of the note in the form \&quot;projects/{project_id}/notes/{note_id}\&quot; (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNoteAsync(String projectsId, String notesId, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNoteCall(projectsId, notesId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteOccurrence */
    private com.squareup.okhttp.Call deleteOccurrenceCall(String projectsId, String occurrencesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling deleteOccurrence(Async)");
        }
        
        // verify the required parameter 'occurrencesId' is set
        if (occurrencesId == null) {
            throw new ApiException("Missing the required parameter 'occurrencesId' when calling deleteOccurrence(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()))
        .replaceAll("\\{" + "occurrencesId" + "\\}", apiClient.escapeString(occurrencesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Deletes the given occurrence from the system.
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence in the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot; (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty deleteOccurrence(String projectsId, String occurrencesId) throws ApiException {
        ApiResponse<Empty> resp = deleteOccurrenceWithHttpInfo(projectsId, occurrencesId);
        return resp.getData();
    }

    /**
     * 
     * Deletes the given occurrence from the system.
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence in the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot; (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> deleteOccurrenceWithHttpInfo(String projectsId, String occurrencesId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOccurrenceCall(projectsId, occurrencesId, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the given occurrence from the system.
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence in the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot; (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOccurrenceAsync(String projectsId, String occurrencesId, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOccurrenceCall(projectsId, occurrencesId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getNote */
    private com.squareup.okhttp.Call getNoteCall(String projectsId, String notesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling getNote(Async)");
        }
        
        // verify the required parameter 'notesId' is set
        if (notesId == null) {
            throw new ApiException("Missing the required parameter 'notesId' when calling getNote(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/notes/{notesId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()))
        .replaceAll("\\{" + "notesId" + "\\}", apiClient.escapeString(notesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Returns the requested occurrence
     * @param projectsId Part of &#x60;name&#x60;. The name of the note in the form \&quot;projects/{project_id}/notes/{note_id}\&quot; (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note getNote(String projectsId, String notesId) throws ApiException {
        ApiResponse<Note> resp = getNoteWithHttpInfo(projectsId, notesId);
        return resp.getData();
    }

    /**
     * 
     * Returns the requested occurrence
     * @param projectsId Part of &#x60;name&#x60;. The name of the note in the form \&quot;projects/{project_id}/notes/{note_id}\&quot; (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> getNoteWithHttpInfo(String projectsId, String notesId) throws ApiException {
        com.squareup.okhttp.Call call = getNoteCall(projectsId, notesId, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the requested occurrence
     * @param projectsId Part of &#x60;name&#x60;. The name of the note in the form \&quot;projects/{project_id}/notes/{note_id}\&quot; (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNoteAsync(String projectsId, String notesId, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNoteCall(projectsId, notesId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOccurrence */
    private com.squareup.okhttp.Call getOccurrenceCall(String projectsId, String occurrencesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling getOccurrence(Async)");
        }
        
        // verify the required parameter 'occurrencesId' is set
        if (occurrencesId == null) {
            throw new ApiException("Missing the required parameter 'occurrencesId' when calling getOccurrence(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()))
        .replaceAll("\\{" + "occurrencesId" + "\\}", apiClient.escapeString(occurrencesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Returns the requested occurrence
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence in the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot; (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return Occurrence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Occurrence getOccurrence(String projectsId, String occurrencesId) throws ApiException {
        ApiResponse<Occurrence> resp = getOccurrenceWithHttpInfo(projectsId, occurrencesId);
        return resp.getData();
    }

    /**
     * 
     * Returns the requested occurrence
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence in the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot; (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return ApiResponse&lt;Occurrence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Occurrence> getOccurrenceWithHttpInfo(String projectsId, String occurrencesId) throws ApiException {
        com.squareup.okhttp.Call call = getOccurrenceCall(projectsId, occurrencesId, null, null);
        Type localVarReturnType = new TypeToken<Occurrence>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the requested occurrence
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence in the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot; (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOccurrenceAsync(String projectsId, String occurrencesId, final ApiCallback<Occurrence> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOccurrenceCall(projectsId, occurrencesId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Occurrence>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOccurrenceNote */
    private com.squareup.okhttp.Call getOccurrenceNoteCall(String projectsId, String occurrencesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling getOccurrenceNote(Async)");
        }
        
        // verify the required parameter 'occurrencesId' is set
        if (occurrencesId == null) {
            throw new ApiException("Missing the required parameter 'occurrencesId' when calling getOccurrenceNote(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}/notes".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()))
        .replaceAll("\\{" + "occurrencesId" + "\\}", apiClient.escapeString(occurrencesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Gets the note that this occurrence is attached to.
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence in the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot; (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note getOccurrenceNote(String projectsId, String occurrencesId) throws ApiException {
        ApiResponse<Note> resp = getOccurrenceNoteWithHttpInfo(projectsId, occurrencesId);
        return resp.getData();
    }

    /**
     * 
     * Gets the note that this occurrence is attached to.
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence in the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot; (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> getOccurrenceNoteWithHttpInfo(String projectsId, String occurrencesId) throws ApiException {
        com.squareup.okhttp.Call call = getOccurrenceNoteCall(projectsId, occurrencesId, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the note that this occurrence is attached to.
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence in the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot; (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOccurrenceNoteAsync(String projectsId, String occurrencesId, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOccurrenceNoteCall(projectsId, occurrencesId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getOperation */
    private com.squareup.okhttp.Call getOperationCall(String projectsId, String operationsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling getOperation(Async)");
        }
        
        // verify the required parameter 'operationsId' is set
        if (operationsId == null) {
            throw new ApiException("Missing the required parameter 'operationsId' when calling getOperation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/operations/{operationsId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()))
        .replaceAll("\\{" + "operationsId" + "\\}", apiClient.escapeString(operationsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Returns the requested occurrence
     * @param projectsId Part of &#x60;name&#x60;. The name of the operation in the form \&quot;projects/{project_id}/operations/{operation_id}\&quot; (required)
     * @param operationsId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Operation getOperation(String projectsId, String operationsId) throws ApiException {
        ApiResponse<Operation> resp = getOperationWithHttpInfo(projectsId, operationsId);
        return resp.getData();
    }

    /**
     * 
     * Returns the requested occurrence
     * @param projectsId Part of &#x60;name&#x60;. The name of the operation in the form \&quot;projects/{project_id}/operations/{operation_id}\&quot; (required)
     * @param operationsId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Operation> getOperationWithHttpInfo(String projectsId, String operationsId) throws ApiException {
        com.squareup.okhttp.Call call = getOperationCall(projectsId, operationsId, null, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the requested occurrence
     * @param projectsId Part of &#x60;name&#x60;. The name of the operation in the form \&quot;projects/{project_id}/operations/{operation_id}\&quot; (required)
     * @param operationsId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOperationAsync(String projectsId, String operationsId, final ApiCallback<Operation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOperationCall(projectsId, operationsId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listNoteOccurrences */
    private com.squareup.okhttp.Call listNoteOccurrencesCall(String projectsId, String notesId, String filter, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling listNoteOccurrences(Async)");
        }
        
        // verify the required parameter 'notesId' is set
        if (notesId == null) {
            throw new ApiException("Missing the required parameter 'notesId' when calling listNoteOccurrences(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/notes/{notesId}/occurrences".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()))
        .replaceAll("\\{" + "notesId" + "\\}", apiClient.escapeString(notesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Lists the names of Occurrences linked to a particular Note.
     * @param projectsId Part of &#x60;name&#x60;. The name field will contain the note name for example:   \&quot;project/{project_id}/notes/{note_id}\&quot; (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ListNoteOccurrencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListNoteOccurrencesResponse listNoteOccurrences(String projectsId, String notesId, String filter, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListNoteOccurrencesResponse> resp = listNoteOccurrencesWithHttpInfo(projectsId, notesId, filter, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * 
     * Lists the names of Occurrences linked to a particular Note.
     * @param projectsId Part of &#x60;name&#x60;. The name field will contain the note name for example:   \&quot;project/{project_id}/notes/{note_id}\&quot; (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ApiResponse&lt;ListNoteOccurrencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListNoteOccurrencesResponse> listNoteOccurrencesWithHttpInfo(String projectsId, String notesId, String filter, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listNoteOccurrencesCall(projectsId, notesId, filter, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListNoteOccurrencesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the names of Occurrences linked to a particular Note.
     * @param projectsId Part of &#x60;name&#x60;. The name field will contain the note name for example:   \&quot;project/{project_id}/notes/{note_id}\&quot; (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNoteOccurrencesAsync(String projectsId, String notesId, String filter, Integer pageSize, String pageToken, final ApiCallback<ListNoteOccurrencesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNoteOccurrencesCall(projectsId, notesId, filter, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListNoteOccurrencesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listNotes */
    private com.squareup.okhttp.Call listNotesCall(String projectsId, String filter, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling listNotes(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/notes".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Lists all notes for a given project.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;project/{project_id} (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ListNotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListNotesResponse listNotes(String projectsId, String filter, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListNotesResponse> resp = listNotesWithHttpInfo(projectsId, filter, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * 
     * Lists all notes for a given project.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;project/{project_id} (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ApiResponse&lt;ListNotesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListNotesResponse> listNotesWithHttpInfo(String projectsId, String filter, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listNotesCall(projectsId, filter, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListNotesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all notes for a given project.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;project/{project_id} (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNotesAsync(String projectsId, String filter, Integer pageSize, String pageToken, final ApiCallback<ListNotesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNotesCall(projectsId, filter, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListNotesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listOccurrences */
    private com.squareup.okhttp.Call listOccurrencesCall(String projectsId, String filter, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling listOccurrences(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/occurrences".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Lists active occurrences for a given project/Digest.
     * @param projectsId Part of &#x60;parent&#x60;. This contains the projectId for example: projects/{project_id} (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of occurrences to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ListOccurrencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListOccurrencesResponse listOccurrences(String projectsId, String filter, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListOccurrencesResponse> resp = listOccurrencesWithHttpInfo(projectsId, filter, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * 
     * Lists active occurrences for a given project/Digest.
     * @param projectsId Part of &#x60;parent&#x60;. This contains the projectId for example: projects/{project_id} (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of occurrences to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ApiResponse&lt;ListOccurrencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListOccurrencesResponse> listOccurrencesWithHttpInfo(String projectsId, String filter, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listOccurrencesCall(projectsId, filter, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListOccurrencesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists active occurrences for a given project/Digest.
     * @param projectsId Part of &#x60;parent&#x60;. This contains the projectId for example: projects/{project_id} (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of occurrences to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOccurrencesAsync(String projectsId, String filter, Integer pageSize, String pageToken, final ApiCallback<ListOccurrencesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOccurrencesCall(projectsId, filter, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListOccurrencesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listOperations */
    private com.squareup.okhttp.Call listOperationsCall(String projectsId, String filter, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling listOperations(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/operations".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Lists all operations for a given project.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;project/{project_id} (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of operations to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ListOperationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListOperationsResponse listOperations(String projectsId, String filter, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListOperationsResponse> resp = listOperationsWithHttpInfo(projectsId, filter, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * 
     * Lists all operations for a given project.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;project/{project_id} (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of operations to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ApiResponse&lt;ListOperationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListOperationsResponse> listOperationsWithHttpInfo(String projectsId, String filter, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listOperationsCall(projectsId, filter, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListOperationsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all operations for a given project.
     * @param projectsId Part of &#x60;parent&#x60;. This field contains the projectId for example: \&quot;project/{project_id} (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of operations to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOperationsAsync(String projectsId, String filter, Integer pageSize, String pageToken, final ApiCallback<ListOperationsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOperationsCall(projectsId, filter, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListOperationsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateNote */
    private com.squareup.okhttp.Call updateNoteCall(String projectsId, String notesId, Note note, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = note;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling updateNote(Async)");
        }
        
        // verify the required parameter 'notesId' is set
        if (notesId == null) {
            throw new ApiException("Missing the required parameter 'notesId' when calling updateNote(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/notes/{notesId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()))
        .replaceAll("\\{" + "notesId" + "\\}", apiClient.escapeString(notesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Updates an existing note.
     * @param projectsId Part of &#x60;name&#x60;. The name of the note. Should be of the form \&quot;projects/{project_id}/notes/{note_id}\&quot;. (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param note The updated note. (optional)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note updateNote(String projectsId, String notesId, Note note) throws ApiException {
        ApiResponse<Note> resp = updateNoteWithHttpInfo(projectsId, notesId, note);
        return resp.getData();
    }

    /**
     * 
     * Updates an existing note.
     * @param projectsId Part of &#x60;name&#x60;. The name of the note. Should be of the form \&quot;projects/{project_id}/notes/{note_id}\&quot;. (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param note The updated note. (optional)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> updateNoteWithHttpInfo(String projectsId, String notesId, Note note) throws ApiException {
        com.squareup.okhttp.Call call = updateNoteCall(projectsId, notesId, note, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing note.
     * @param projectsId Part of &#x60;name&#x60;. The name of the note. Should be of the form \&quot;projects/{project_id}/notes/{note_id}\&quot;. (required)
     * @param notesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param note The updated note. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNoteAsync(String projectsId, String notesId, Note note, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNoteCall(projectsId, notesId, note, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateOccurrence */
    private com.squareup.okhttp.Call updateOccurrenceCall(String projectsId, String occurrencesId, Occurrence occurrence, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = occurrence;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling updateOccurrence(Async)");
        }
        
        // verify the required parameter 'occurrencesId' is set
        if (occurrencesId == null) {
            throw new ApiException("Missing the required parameter 'occurrencesId' when calling updateOccurrence(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()))
        .replaceAll("\\{" + "occurrencesId" + "\\}", apiClient.escapeString(occurrencesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Updates an existing occurrence.
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence. Should be of the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot;. (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param occurrence The updated occurrence. (optional)
     * @return Occurrence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Occurrence updateOccurrence(String projectsId, String occurrencesId, Occurrence occurrence) throws ApiException {
        ApiResponse<Occurrence> resp = updateOccurrenceWithHttpInfo(projectsId, occurrencesId, occurrence);
        return resp.getData();
    }

    /**
     * 
     * Updates an existing occurrence.
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence. Should be of the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot;. (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param occurrence The updated occurrence. (optional)
     * @return ApiResponse&lt;Occurrence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Occurrence> updateOccurrenceWithHttpInfo(String projectsId, String occurrencesId, Occurrence occurrence) throws ApiException {
        com.squareup.okhttp.Call call = updateOccurrenceCall(projectsId, occurrencesId, occurrence, null, null);
        Type localVarReturnType = new TypeToken<Occurrence>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing occurrence.
     * @param projectsId Part of &#x60;name&#x60;. The name of the occurrence. Should be of the form \&quot;projects/{project_id}/occurrences/{occurrence_id}\&quot;. (required)
     * @param occurrencesId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param occurrence The updated occurrence. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOccurrenceAsync(String projectsId, String occurrencesId, Occurrence occurrence, final ApiCallback<Occurrence> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOccurrenceCall(projectsId, occurrencesId, occurrence, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Occurrence>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateOperation */
    private com.squareup.okhttp.Call updateOperationCall(String projectsId, String operationsId, UpdateOperationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'projectsId' is set
        if (projectsId == null) {
            throw new ApiException("Missing the required parameter 'projectsId' when calling updateOperation(Async)");
        }
        
        // verify the required parameter 'operationsId' is set
        if (operationsId == null) {
            throw new ApiException("Missing the required parameter 'operationsId' when calling updateOperation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/v1alpha1/projects/{projectsId}/operations/{operationsId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectsId" + "\\}", apiClient.escapeString(projectsId.toString()))
        .replaceAll("\\{" + "operationsId" + "\\}", apiClient.escapeString(operationsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Updates an existing operation returns an error if operation  does not exist. The only valid operations are to update mark the done bit change the result.
     * @param projectsId Part of &#x60;name&#x60;. The name of the Operation. Should be of the form \&quot;projects/{project_id}/operations/{operation_id}\&quot;. (required)
     * @param operationsId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param body The request body. (optional)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Operation updateOperation(String projectsId, String operationsId, UpdateOperationRequest body) throws ApiException {
        ApiResponse<Operation> resp = updateOperationWithHttpInfo(projectsId, operationsId, body);
        return resp.getData();
    }

    /**
     * 
     * Updates an existing operation returns an error if operation  does not exist. The only valid operations are to update mark the done bit change the result.
     * @param projectsId Part of &#x60;name&#x60;. The name of the Operation. Should be of the form \&quot;projects/{project_id}/operations/{operation_id}\&quot;. (required)
     * @param operationsId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param body The request body. (optional)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Operation> updateOperationWithHttpInfo(String projectsId, String operationsId, UpdateOperationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateOperationCall(projectsId, operationsId, body, null, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing operation returns an error if operation  does not exist. The only valid operations are to update mark the done bit change the result.
     * @param projectsId Part of &#x60;name&#x60;. The name of the Operation. Should be of the form \&quot;projects/{project_id}/operations/{operation_id}\&quot;. (required)
     * @param operationsId Part of &#x60;name&#x60;. See documentation of &#x60;projectsId&#x60;. (required)
     * @param body The request body. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOperationAsync(String projectsId, String operationsId, UpdateOperationRequest body, final ApiCallback<Operation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOperationCall(projectsId, operationsId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
