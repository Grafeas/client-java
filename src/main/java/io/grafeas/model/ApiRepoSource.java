/*
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.grafeas.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RepoSource describes the location of the source in a Google Cloud Source Repository.
 */
@ApiModel(description = "RepoSource describes the location of the source in a Google Cloud Source Repository.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-04T13:20:14.121-07:00")
public class ApiRepoSource {
  @SerializedName("project_id")
  private String projectId = null;

  @SerializedName("repo_name")
  private String repoName = null;

  @SerializedName("branch_name")
  private String branchName = null;

  @SerializedName("tag_name")
  private String tagName = null;

  @SerializedName("commit_sha")
  private String commitSha = null;

  public ApiRepoSource projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * ID of the project that owns the repo.
   * @return projectId
  **/
  @ApiModelProperty(value = "ID of the project that owns the repo.")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public ApiRepoSource repoName(String repoName) {
    this.repoName = repoName;
    return this;
  }

   /**
   * Name of the repo.
   * @return repoName
  **/
  @ApiModelProperty(value = "Name of the repo.")
  public String getRepoName() {
    return repoName;
  }

  public void setRepoName(String repoName) {
    this.repoName = repoName;
  }

  public ApiRepoSource branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

   /**
   * Name of the branch to build.
   * @return branchName
  **/
  @ApiModelProperty(value = "Name of the branch to build.")
  public String getBranchName() {
    return branchName;
  }

  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }

  public ApiRepoSource tagName(String tagName) {
    this.tagName = tagName;
    return this;
  }

   /**
   * Name of the tag to build.
   * @return tagName
  **/
  @ApiModelProperty(value = "Name of the tag to build.")
  public String getTagName() {
    return tagName;
  }

  public void setTagName(String tagName) {
    this.tagName = tagName;
  }

  public ApiRepoSource commitSha(String commitSha) {
    this.commitSha = commitSha;
    return this;
  }

   /**
   * Explicit commit SHA to build.
   * @return commitSha
  **/
  @ApiModelProperty(value = "Explicit commit SHA to build.")
  public String getCommitSha() {
    return commitSha;
  }

  public void setCommitSha(String commitSha) {
    this.commitSha = commitSha;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiRepoSource apiRepoSource = (ApiRepoSource) o;
    return Objects.equals(this.projectId, apiRepoSource.projectId) &&
        Objects.equals(this.repoName, apiRepoSource.repoName) &&
        Objects.equals(this.branchName, apiRepoSource.branchName) &&
        Objects.equals(this.tagName, apiRepoSource.tagName) &&
        Objects.equals(this.commitSha, apiRepoSource.commitSha);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectId, repoName, branchName, tagName, commitSha);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiRepoSource {\n");
    
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    repoName: ").append(toIndentedString(repoName)).append("\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    tagName: ").append(toIndentedString(tagName)).append("\n");
    sb.append("    commitSha: ").append(toIndentedString(commitSha)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

