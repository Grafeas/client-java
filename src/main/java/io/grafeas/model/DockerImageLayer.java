/*
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.grafeas.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.grafeas.model.LayerDirective;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Layer holds metadata specific to a layer of a Docker image.
 */
@ApiModel(description = "Layer holds metadata specific to a layer of a Docker image.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-04T13:20:14.121-07:00")
public class DockerImageLayer {
  @SerializedName("directive")
  private LayerDirective directive = null;

  @SerializedName("arguments")
  private String arguments = null;

  public DockerImageLayer directive(LayerDirective directive) {
    this.directive = directive;
    return this;
  }

   /**
   * The recovered Dockerfile directive used to construct this layer.
   * @return directive
  **/
  @ApiModelProperty(value = "The recovered Dockerfile directive used to construct this layer.")
  public LayerDirective getDirective() {
    return directive;
  }

  public void setDirective(LayerDirective directive) {
    this.directive = directive;
  }

  public DockerImageLayer arguments(String arguments) {
    this.arguments = arguments;
    return this;
  }

   /**
   * The recovered arguments to the Dockerfile directive.
   * @return arguments
  **/
  @ApiModelProperty(value = "The recovered arguments to the Dockerfile directive.")
  public String getArguments() {
    return arguments;
  }

  public void setArguments(String arguments) {
    this.arguments = arguments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DockerImageLayer dockerImageLayer = (DockerImageLayer) o;
    return Objects.equals(this.directive, dockerImageLayer.directive) &&
        Objects.equals(this.arguments, dockerImageLayer.arguments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directive, arguments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DockerImageLayer {\n");
    
    sb.append("    directive: ").append(toIndentedString(directive)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

