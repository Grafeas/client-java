/*
 * grafeas.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.DiscoveredAnalysisStatus;
import io.swagger.client.model.DiscoveredContinuousAnalysis;
import io.swagger.client.model.RpcStatus;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Provides information about the analysis status of a discovered resource.
 */
@ApiModel(description = "Provides information about the analysis status of a discovered resource.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-08-22T18:45:44.983-04:00")
public class DiscoveryDiscovered {
  @SerializedName("continuous_analysis")
  private DiscoveredContinuousAnalysis continuousAnalysis = null;

  @SerializedName("last_analysis_time")
  private OffsetDateTime lastAnalysisTime = null;

  @SerializedName("analysis_status")
  private DiscoveredAnalysisStatus analysisStatus = null;

  @SerializedName("analysis_status_error")
  private RpcStatus analysisStatusError = null;

  public DiscoveryDiscovered continuousAnalysis(DiscoveredContinuousAnalysis continuousAnalysis) {
    this.continuousAnalysis = continuousAnalysis;
    return this;
  }

   /**
   * Whether the resource is continuously analyzed.
   * @return continuousAnalysis
  **/
  @ApiModelProperty(value = "Whether the resource is continuously analyzed.")
  public DiscoveredContinuousAnalysis getContinuousAnalysis() {
    return continuousAnalysis;
  }

  public void setContinuousAnalysis(DiscoveredContinuousAnalysis continuousAnalysis) {
    this.continuousAnalysis = continuousAnalysis;
  }

  public DiscoveryDiscovered lastAnalysisTime(OffsetDateTime lastAnalysisTime) {
    this.lastAnalysisTime = lastAnalysisTime;
    return this;
  }

   /**
   * The last time continuous analysis was done for this resource. Deprecated, do not use.
   * @return lastAnalysisTime
  **/
  @ApiModelProperty(value = "The last time continuous analysis was done for this resource. Deprecated, do not use.")
  public OffsetDateTime getLastAnalysisTime() {
    return lastAnalysisTime;
  }

  public void setLastAnalysisTime(OffsetDateTime lastAnalysisTime) {
    this.lastAnalysisTime = lastAnalysisTime;
  }

  public DiscoveryDiscovered analysisStatus(DiscoveredAnalysisStatus analysisStatus) {
    this.analysisStatus = analysisStatus;
    return this;
  }

   /**
   * The status of discovery for the resource.
   * @return analysisStatus
  **/
  @ApiModelProperty(value = "The status of discovery for the resource.")
  public DiscoveredAnalysisStatus getAnalysisStatus() {
    return analysisStatus;
  }

  public void setAnalysisStatus(DiscoveredAnalysisStatus analysisStatus) {
    this.analysisStatus = analysisStatus;
  }

  public DiscoveryDiscovered analysisStatusError(RpcStatus analysisStatusError) {
    this.analysisStatusError = analysisStatusError;
    return this;
  }

   /**
   * When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.
   * @return analysisStatusError
  **/
  @ApiModelProperty(value = "When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API.")
  public RpcStatus getAnalysisStatusError() {
    return analysisStatusError;
  }

  public void setAnalysisStatusError(RpcStatus analysisStatusError) {
    this.analysisStatusError = analysisStatusError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoveryDiscovered discoveryDiscovered = (DiscoveryDiscovered) o;
    return Objects.equals(this.continuousAnalysis, discoveryDiscovered.continuousAnalysis) &&
        Objects.equals(this.lastAnalysisTime, discoveryDiscovered.lastAnalysisTime) &&
        Objects.equals(this.analysisStatus, discoveryDiscovered.analysisStatus) &&
        Objects.equals(this.analysisStatusError, discoveryDiscovered.analysisStatusError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(continuousAnalysis, lastAnalysisTime, analysisStatus, analysisStatusError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoveryDiscovered {\n");
    
    sb.append("    continuousAnalysis: ").append(toIndentedString(continuousAnalysis)).append("\n");
    sb.append("    lastAnalysisTime: ").append(toIndentedString(lastAnalysisTime)).append("\n");
    sb.append("    analysisStatus: ").append(toIndentedString(analysisStatus)).append("\n");
    sb.append("    analysisStatusError: ").append(toIndentedString(analysisStatusError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

