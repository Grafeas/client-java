/*
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.grafeas.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * - DIRECTIVE_UNSPECIFIED: Default value for unsupported/missing directive  - MAINTAINER: https://docs.docker.com/reference/builder/#maintainer  - RUN: https://docs.docker.com/reference/builder/#run  - CMD: https://docs.docker.com/reference/builder/#cmd  - LABEL: https://docs.docker.com/reference/builder/#label  - EXPOSE: https://docs.docker.com/reference/builder/#expose  - ENV: https://docs.docker.com/reference/builder/#env  - ADD: https://docs.docker.com/reference/builder/#add  - COPY: https://docs.docker.com/reference/builder/#copy  - ENTRYPOINT: https://docs.docker.com/reference/builder/#entrypoint  - VOLUME: https://docs.docker.com/reference/builder/#volume  - USER: https://docs.docker.com/reference/builder/#user  - WORKDIR: https://docs.docker.com/reference/builder/#workdir  - ARG: https://docs.docker.com/reference/builder/#arg  - ONBUILD: https://docs.docker.com/reference/builder/#onbuild  - STOPSIGNAL: https://docs.docker.com/reference/builder/#stopsignal  - HEALTHCHECK: https://docs.docker.com/reference/builder/#healthcheck  - SHELL: https://docs.docker.com/reference/builder/#shell
 */
@JsonAdapter(LayerDirective.Adapter.class)
public enum LayerDirective {
  
  DIRECTIVE_UNSPECIFIED("DIRECTIVE_UNSPECIFIED"),
  
  MAINTAINER("MAINTAINER"),
  
  RUN("RUN"),
  
  CMD("CMD"),
  
  LABEL("LABEL"),
  
  EXPOSE("EXPOSE"),
  
  ENV("ENV"),
  
  ADD("ADD"),
  
  COPY("COPY"),
  
  ENTRYPOINT("ENTRYPOINT"),
  
  VOLUME("VOLUME"),
  
  USER("USER"),
  
  WORKDIR("WORKDIR"),
  
  ARG("ARG"),
  
  ONBUILD("ONBUILD"),
  
  STOPSIGNAL("STOPSIGNAL"),
  
  HEALTHCHECK("HEALTHCHECK"),
  
  SHELL("SHELL");

  private String value;

  LayerDirective(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static LayerDirective fromValue(String text) {
    for (LayerDirective b : LayerDirective.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<LayerDirective> {
    @Override
    public void write(final JsonWriter jsonWriter, final LayerDirective enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public LayerDirective read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return LayerDirective.fromValue(String.valueOf(value));
    }
  }
}

