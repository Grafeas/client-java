/*
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.grafeas.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.grafeas.model.ApiAliasContext;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * A SourceContext referring to a Gerrit project.
 */
@ApiModel(description = "A SourceContext referring to a Gerrit project.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-04T13:20:14.121-07:00")
public class ApiGerritSourceContext {
  @SerializedName("host_uri")
  private String hostUri = null;

  @SerializedName("gerrit_project")
  private String gerritProject = null;

  @SerializedName("revision_id")
  private String revisionId = null;

  @SerializedName("alias_context")
  private ApiAliasContext aliasContext = null;

  public ApiGerritSourceContext hostUri(String hostUri) {
    this.hostUri = hostUri;
    return this;
  }

   /**
   * The URI of a running Gerrit instance.
   * @return hostUri
  **/
  @ApiModelProperty(value = "The URI of a running Gerrit instance.")
  public String getHostUri() {
    return hostUri;
  }

  public void setHostUri(String hostUri) {
    this.hostUri = hostUri;
  }

  public ApiGerritSourceContext gerritProject(String gerritProject) {
    this.gerritProject = gerritProject;
    return this;
  }

   /**
   * The full project name within the host. Projects may be nested, so \&quot;project/subproject\&quot; is a valid project name. The \&quot;repo name\&quot; is the hostURI/project.
   * @return gerritProject
  **/
  @ApiModelProperty(value = "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.")
  public String getGerritProject() {
    return gerritProject;
  }

  public void setGerritProject(String gerritProject) {
    this.gerritProject = gerritProject;
  }

  public ApiGerritSourceContext revisionId(String revisionId) {
    this.revisionId = revisionId;
    return this;
  }

   /**
   * A revision (commit) ID.
   * @return revisionId
  **/
  @ApiModelProperty(value = "A revision (commit) ID.")
  public String getRevisionId() {
    return revisionId;
  }

  public void setRevisionId(String revisionId) {
    this.revisionId = revisionId;
  }

  public ApiGerritSourceContext aliasContext(ApiAliasContext aliasContext) {
    this.aliasContext = aliasContext;
    return this;
  }

   /**
   * An alias, which may be a branch or tag.
   * @return aliasContext
  **/
  @ApiModelProperty(value = "An alias, which may be a branch or tag.")
  public ApiAliasContext getAliasContext() {
    return aliasContext;
  }

  public void setAliasContext(ApiAliasContext aliasContext) {
    this.aliasContext = aliasContext;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiGerritSourceContext apiGerritSourceContext = (ApiGerritSourceContext) o;
    return Objects.equals(this.hostUri, apiGerritSourceContext.hostUri) &&
        Objects.equals(this.gerritProject, apiGerritSourceContext.gerritProject) &&
        Objects.equals(this.revisionId, apiGerritSourceContext.revisionId) &&
        Objects.equals(this.aliasContext, apiGerritSourceContext.aliasContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostUri, gerritProject, revisionId, aliasContext);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiGerritSourceContext {\n");
    
    sb.append("    hostUri: ").append(toIndentedString(hostUri)).append("\n");
    sb.append("    gerritProject: ").append(toIndentedString(gerritProject)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    aliasContext: ").append(toIndentedString(aliasContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

