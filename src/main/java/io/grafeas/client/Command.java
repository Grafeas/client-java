/**
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.grafeas.client;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;


/**
 * Command describes a step performed as part of the build pipeline.
 */
@ApiModel(description = "Command describes a step performed as part of the build pipeline.")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-08T14:44:14.136-04:00")
public class Command   {
  @SerializedName("name")
  private String name = null;

  @SerializedName("env")
  private List<String> env = new ArrayList<String>();

  @SerializedName("args")
  private List<String> args = new ArrayList<String>();

  @SerializedName("dir")
  private String dir = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("waitFor")
  private List<String> waitFor = new ArrayList<String>();

  public Command name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Command env(List<String> env) {
    this.env = env;
    return this;
  }

  public Command addEnvItem(String envItem) {
    this.env.add(envItem);
    return this;
  }

   /**
   * Environment variables set before running this Command.
   * @return env
  **/
  @ApiModelProperty(example = "null", value = "Environment variables set before running this Command.")
  public List<String> getEnv() {
    return env;
  }

  public void setEnv(List<String> env) {
    this.env = env;
  }

  public Command args(List<String> args) {
    this.args = args;
    return this;
  }

  public Command addArgsItem(String argsItem) {
    this.args.add(argsItem);
    return this;
  }

   /**
   * Command-line arguments used when executing this Command.
   * @return args
  **/
  @ApiModelProperty(example = "null", value = "Command-line arguments used when executing this Command.")
  public List<String> getArgs() {
    return args;
  }

  public void setArgs(List<String> args) {
    this.args = args;
  }

  public Command dir(String dir) {
    this.dir = dir;
    return this;
  }

   /**
   * Working directory (relative to project source root) used when running this Command.
   * @return dir
  **/
  @ApiModelProperty(example = "null", value = "Working directory (relative to project source root) used when running this Command.")
  public String getDir() {
    return dir;
  }

  public void setDir(String dir) {
    this.dir = dir;
  }

  public Command id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Command waitFor(List<String> waitFor) {
    this.waitFor = waitFor;
    return this;
  }

  public Command addWaitForItem(String waitForItem) {
    this.waitFor.add(waitForItem);
    return this;
  }

   /**
   * The ID(s) of the Command(s) that this Command depends on.
   * @return waitFor
  **/
  @ApiModelProperty(example = "null", value = "The ID(s) of the Command(s) that this Command depends on.")
  public List<String> getWaitFor() {
    return waitFor;
  }

  public void setWaitFor(List<String> waitFor) {
    this.waitFor = waitFor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Command command = (Command) o;
    return Objects.equals(this.name, command.name) &&
        Objects.equals(this.env, command.env) &&
        Objects.equals(this.args, command.args) &&
        Objects.equals(this.dir, command.dir) &&
        Objects.equals(this.id, command.id) &&
        Objects.equals(this.waitFor, command.waitFor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, env, args, dir, id, waitFor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Command {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    dir: ").append(toIndentedString(dir)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    waitFor: ").append(toIndentedString(waitFor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

