/**
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.grafeas.client;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.grafeas.client.ExtendedSourceContext;
import io.grafeas.client.FileHashes;
import io.grafeas.client.RepoSource;
import io.grafeas.client.StorageSource;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * Source describes the location of the source used for the build.
 */
@ApiModel(description = "Source describes the location of the source used for the build.")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-08T14:44:14.136-04:00")
public class Source   {
  @SerializedName("storageSource")
  private StorageSource storageSource = null;

  @SerializedName("repoSource")
  private RepoSource repoSource = null;

  @SerializedName("artifactStorageSource")
  private StorageSource artifactStorageSource = null;

  @SerializedName("sourceContext")
  private ExtendedSourceContext sourceContext = null;

  @SerializedName("additionalSourceContexts")
  private List<ExtendedSourceContext> additionalSourceContexts = new ArrayList<ExtendedSourceContext>();

  @SerializedName("fileHashes")
  private Map<String, FileHashes> fileHashes = new HashMap<String, FileHashes>();

  public Source storageSource(StorageSource storageSource) {
    this.storageSource = storageSource;
    return this;
  }

   /**
   * If provided, get the source from this location in in Google Cloud Storage.
   * @return storageSource
  **/
  @ApiModelProperty(example = "null", value = "If provided, get the source from this location in in Google Cloud Storage.")
  public StorageSource getStorageSource() {
    return storageSource;
  }

  public void setStorageSource(StorageSource storageSource) {
    this.storageSource = storageSource;
  }

  public Source repoSource(RepoSource repoSource) {
    this.repoSource = repoSource;
    return this;
  }

   /**
   * If provided, get source from this location in a Cloud Repo.
   * @return repoSource
  **/
  @ApiModelProperty(example = "null", value = "If provided, get source from this location in a Cloud Repo.")
  public RepoSource getRepoSource() {
    return repoSource;
  }

  public void setRepoSource(RepoSource repoSource) {
    this.repoSource = repoSource;
  }

  public Source artifactStorageSource(StorageSource artifactStorageSource) {
    this.artifactStorageSource = artifactStorageSource;
    return this;
  }

   /**
   * If provided, the input binary artifacts for the build came from this location.
   * @return artifactStorageSource
  **/
  @ApiModelProperty(example = "null", value = "If provided, the input binary artifacts for the build came from this location.")
  public StorageSource getArtifactStorageSource() {
    return artifactStorageSource;
  }

  public void setArtifactStorageSource(StorageSource artifactStorageSource) {
    this.artifactStorageSource = artifactStorageSource;
  }

  public Source sourceContext(ExtendedSourceContext sourceContext) {
    this.sourceContext = sourceContext;
    return this;
  }

   /**
   * If provided, the source code used for the build came from this location.
   * @return sourceContext
  **/
  @ApiModelProperty(example = "null", value = "If provided, the source code used for the build came from this location.")
  public ExtendedSourceContext getSourceContext() {
    return sourceContext;
  }

  public void setSourceContext(ExtendedSourceContext sourceContext) {
    this.sourceContext = sourceContext;
  }

  public Source additionalSourceContexts(List<ExtendedSourceContext> additionalSourceContexts) {
    this.additionalSourceContexts = additionalSourceContexts;
    return this;
  }

  public Source addAdditionalSourceContextsItem(ExtendedSourceContext additionalSourceContextsItem) {
    this.additionalSourceContexts.add(additionalSourceContextsItem);
    return this;
  }

   /**
   * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the source_context field.
   * @return additionalSourceContexts
  **/
  @ApiModelProperty(example = "null", value = "If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the source_context field.")
  public List<ExtendedSourceContext> getAdditionalSourceContexts() {
    return additionalSourceContexts;
  }

  public void setAdditionalSourceContexts(List<ExtendedSourceContext> additionalSourceContexts) {
    this.additionalSourceContexts = additionalSourceContexts;
  }

  public Source fileHashes(Map<String, FileHashes> fileHashes) {
    this.fileHashes = fileHashes;
    return this;
  }

  public Source putFileHashesItem(String key, FileHashes fileHashesItem) {
    this.fileHashes.put(key, fileHashesItem);
    return this;
  }

   /**
   * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build.  The keys to this map are file paths used as build source and the values contain the hash values for those files.  If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
   * @return fileHashes
  **/
  @ApiModelProperty(example = "null", value = "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build.  The keys to this map are file paths used as build source and the values contain the hash values for those files.  If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.")
  public Map<String, FileHashes> getFileHashes() {
    return fileHashes;
  }

  public void setFileHashes(Map<String, FileHashes> fileHashes) {
    this.fileHashes = fileHashes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Source source = (Source) o;
    return Objects.equals(this.storageSource, source.storageSource) &&
        Objects.equals(this.repoSource, source.repoSource) &&
        Objects.equals(this.artifactStorageSource, source.artifactStorageSource) &&
        Objects.equals(this.sourceContext, source.sourceContext) &&
        Objects.equals(this.additionalSourceContexts, source.additionalSourceContexts) &&
        Objects.equals(this.fileHashes, source.fileHashes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storageSource, repoSource, artifactStorageSource, sourceContext, additionalSourceContexts, fileHashes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Source {\n");
    
    sb.append("    storageSource: ").append(toIndentedString(storageSource)).append("\n");
    sb.append("    repoSource: ").append(toIndentedString(repoSource)).append("\n");
    sb.append("    artifactStorageSource: ").append(toIndentedString(artifactStorageSource)).append("\n");
    sb.append("    sourceContext: ").append(toIndentedString(sourceContext)).append("\n");
    sb.append("    additionalSourceContexts: ").append(toIndentedString(additionalSourceContexts)).append("\n");
    sb.append("    fileHashes: ").append(toIndentedString(fileHashes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

