/*
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.grafeas.api;

import io.grafeas.ApiCallback;
import io.grafeas.ApiClient;
import io.grafeas.ApiException;
import io.grafeas.ApiResponse;
import io.grafeas.Configuration;
import io.grafeas.Pair;
import io.grafeas.ProgressRequestBody;
import io.grafeas.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.grafeas.model.ApiCreateOperationRequest;
import io.grafeas.model.ApiListNoteOccurrencesResponse;
import io.grafeas.model.ApiListNotesResponse;
import io.grafeas.model.ApiListOccurrencesResponse;
import io.grafeas.model.ApiNote;
import io.grafeas.model.ApiOccurrence;
import io.grafeas.model.LongrunningOperation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GrafeasApi {
    private ApiClient apiClient;

    public GrafeasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GrafeasApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createNote
     * @param parent  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNoteCall(String parent, ApiNote body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1alpha1/{parent}/notes"
            .replaceAll("\\{" + "parent" + "\\}", apiClient.escapeString(parent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNoteValidateBeforeCall(String parent, ApiNote body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling createNote(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createNote(Async)");
        }
        

        com.squareup.okhttp.Call call = createNoteCall(parent, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new &#x60;Note&#x60;.
     * 
     * @param parent  (required)
     * @param body  (required)
     * @return ApiNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiNote createNote(String parent, ApiNote body) throws ApiException {
        ApiResponse<ApiNote> resp = createNoteWithHttpInfo(parent, body);
        return resp.getData();
    }

    /**
     * Creates a new &#x60;Note&#x60;.
     * 
     * @param parent  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ApiNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiNote> createNoteWithHttpInfo(String parent, ApiNote body) throws ApiException {
        com.squareup.okhttp.Call call = createNoteValidateBeforeCall(parent, body, null, null);
        Type localVarReturnType = new TypeToken<ApiNote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new &#x60;Note&#x60;. (asynchronously)
     * 
     * @param parent  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNoteAsync(String parent, ApiNote body, final ApiCallback<ApiNote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNoteValidateBeforeCall(parent, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiNote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOccurrence
     * @param parent  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOccurrenceCall(String parent, ApiOccurrence body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1alpha1/{parent}/occurrences"
            .replaceAll("\\{" + "parent" + "\\}", apiClient.escapeString(parent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOccurrenceValidateBeforeCall(String parent, ApiOccurrence body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling createOccurrence(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOccurrence(Async)");
        }
        

        com.squareup.okhttp.Call call = createOccurrenceCall(parent, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new &#x60;Occurrence&#x60;. Use this method to create &#x60;Occurrences&#x60; for a resource.
     * 
     * @param parent  (required)
     * @param body  (required)
     * @return ApiOccurrence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiOccurrence createOccurrence(String parent, ApiOccurrence body) throws ApiException {
        ApiResponse<ApiOccurrence> resp = createOccurrenceWithHttpInfo(parent, body);
        return resp.getData();
    }

    /**
     * Creates a new &#x60;Occurrence&#x60;. Use this method to create &#x60;Occurrences&#x60; for a resource.
     * 
     * @param parent  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ApiOccurrence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiOccurrence> createOccurrenceWithHttpInfo(String parent, ApiOccurrence body) throws ApiException {
        com.squareup.okhttp.Call call = createOccurrenceValidateBeforeCall(parent, body, null, null);
        Type localVarReturnType = new TypeToken<ApiOccurrence>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new &#x60;Occurrence&#x60;. Use this method to create &#x60;Occurrences&#x60; for a resource. (asynchronously)
     * 
     * @param parent  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOccurrenceAsync(String parent, ApiOccurrence body, final ApiCallback<ApiOccurrence> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOccurrenceValidateBeforeCall(parent, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiOccurrence>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOperation
     * @param parent  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOperationCall(String parent, ApiCreateOperationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1alpha1/{parent}/operations"
            .replaceAll("\\{" + "parent" + "\\}", apiClient.escapeString(parent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOperationValidateBeforeCall(String parent, ApiCreateOperationRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling createOperation(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = createOperationCall(parent, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new &#x60;Operation&#x60;.
     * 
     * @param parent  (required)
     * @param body  (required)
     * @return LongrunningOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LongrunningOperation createOperation(String parent, ApiCreateOperationRequest body) throws ApiException {
        ApiResponse<LongrunningOperation> resp = createOperationWithHttpInfo(parent, body);
        return resp.getData();
    }

    /**
     * Creates a new &#x60;Operation&#x60;.
     * 
     * @param parent  (required)
     * @param body  (required)
     * @return ApiResponse&lt;LongrunningOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LongrunningOperation> createOperationWithHttpInfo(String parent, ApiCreateOperationRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createOperationValidateBeforeCall(parent, body, null, null);
        Type localVarReturnType = new TypeToken<LongrunningOperation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new &#x60;Operation&#x60;. (asynchronously)
     * 
     * @param parent  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOperationAsync(String parent, ApiCreateOperationRequest body, final ApiCallback<LongrunningOperation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOperationValidateBeforeCall(parent, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LongrunningOperation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOccurrenceNote
     * @param name  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOccurrenceNoteCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha1/{name}/notes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOccurrenceNoteValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getOccurrenceNote(Async)");
        }
        

        com.squareup.okhttp.Call call = getOccurrenceNoteCall(name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the &#x60;Note&#x60; attached to the given &#x60;Occurrence&#x60;.
     * 
     * @param name  (required)
     * @return ApiNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiNote getOccurrenceNote(String name) throws ApiException {
        ApiResponse<ApiNote> resp = getOccurrenceNoteWithHttpInfo(name);
        return resp.getData();
    }

    /**
     * Gets the &#x60;Note&#x60; attached to the given &#x60;Occurrence&#x60;.
     * 
     * @param name  (required)
     * @return ApiResponse&lt;ApiNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiNote> getOccurrenceNoteWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = getOccurrenceNoteValidateBeforeCall(name, null, null);
        Type localVarReturnType = new TypeToken<ApiNote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the &#x60;Note&#x60; attached to the given &#x60;Occurrence&#x60;. (asynchronously)
     * 
     * @param name  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOccurrenceNoteAsync(String name, final ApiCallback<ApiNote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOccurrenceNoteValidateBeforeCall(name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiNote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNoteOccurrences
     * @param name  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNoteOccurrencesCall(String name, String filter, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha1/{name}/occurrences"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_token", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNoteOccurrencesValidateBeforeCall(String name, String filter, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling listNoteOccurrences(Async)");
        }
        

        com.squareup.okhttp.Call call = listNoteOccurrencesCall(name, filter, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists &#x60;Occurrences&#x60; referencing the specified &#x60;Note&#x60;. Use this method to get all occurrences referencing your &#x60;Note&#x60; across all your customer projects.
     * 
     * @param name  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ApiListNoteOccurrencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiListNoteOccurrencesResponse listNoteOccurrences(String name, String filter, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ApiListNoteOccurrencesResponse> resp = listNoteOccurrencesWithHttpInfo(name, filter, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Lists &#x60;Occurrences&#x60; referencing the specified &#x60;Note&#x60;. Use this method to get all occurrences referencing your &#x60;Note&#x60; across all your customer projects.
     * 
     * @param name  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ApiResponse&lt;ApiListNoteOccurrencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiListNoteOccurrencesResponse> listNoteOccurrencesWithHttpInfo(String name, String filter, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listNoteOccurrencesValidateBeforeCall(name, filter, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ApiListNoteOccurrencesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists &#x60;Occurrences&#x60; referencing the specified &#x60;Note&#x60;. Use this method to get all occurrences referencing your &#x60;Note&#x60; across all your customer projects. (asynchronously)
     * 
     * @param name  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNoteOccurrencesAsync(String name, String filter, Integer pageSize, String pageToken, final ApiCallback<ApiListNoteOccurrencesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNoteOccurrencesValidateBeforeCall(name, filter, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiListNoteOccurrencesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNotes
     * @param parent  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNotesCall(String parent, String filter, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha1/{parent}/notes"
            .replaceAll("\\{" + "parent" + "\\}", apiClient.escapeString(parent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_token", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNotesValidateBeforeCall(String parent, String filter, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling listNotes(Async)");
        }
        

        com.squareup.okhttp.Call call = listNotesCall(parent, filter, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists all &#x60;Notes&#x60; for a given project.
     * 
     * @param parent  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ApiListNotesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiListNotesResponse listNotes(String parent, String filter, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ApiListNotesResponse> resp = listNotesWithHttpInfo(parent, filter, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Lists all &#x60;Notes&#x60; for a given project.
     * 
     * @param parent  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ApiResponse&lt;ApiListNotesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiListNotesResponse> listNotesWithHttpInfo(String parent, String filter, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listNotesValidateBeforeCall(parent, filter, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ApiListNotesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists all &#x60;Notes&#x60; for a given project. (asynchronously)
     * 
     * @param parent  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of notes to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNotesAsync(String parent, String filter, Integer pageSize, String pageToken, final ApiCallback<ApiListNotesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNotesValidateBeforeCall(parent, filter, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiListNotesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listOccurrences
     * @param parent  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of occurrences to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listOccurrencesCall(String parent, String filter, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha1/{parent}/occurrences"
            .replaceAll("\\{" + "parent" + "\\}", apiClient.escapeString(parent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_token", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listOccurrencesValidateBeforeCall(String parent, String filter, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parent' is set
        if (parent == null) {
            throw new ApiException("Missing the required parameter 'parent' when calling listOccurrences(Async)");
        }
        

        com.squareup.okhttp.Call call = listOccurrencesCall(parent, filter, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists active &#x60;Occurrences&#x60; for a given project matching the filters.
     * 
     * @param parent  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of occurrences to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ApiListOccurrencesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiListOccurrencesResponse listOccurrences(String parent, String filter, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ApiListOccurrencesResponse> resp = listOccurrencesWithHttpInfo(parent, filter, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Lists active &#x60;Occurrences&#x60; for a given project matching the filters.
     * 
     * @param parent  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of occurrences to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @return ApiResponse&lt;ApiListOccurrencesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiListOccurrencesResponse> listOccurrencesWithHttpInfo(String parent, String filter, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listOccurrencesValidateBeforeCall(parent, filter, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ApiListOccurrencesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists active &#x60;Occurrences&#x60; for a given project matching the filters. (asynchronously)
     * 
     * @param parent  (required)
     * @param filter The filter expression. (optional)
     * @param pageSize Number of occurrences to return in the list. (optional)
     * @param pageToken Token to provide to skip to a particular spot in the list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listOccurrencesAsync(String parent, String filter, Integer pageSize, String pageToken, final ApiCallback<ApiListOccurrencesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listOccurrencesValidateBeforeCall(parent, filter, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiListOccurrencesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNote
     * @param name  (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNoteCall(String name, ApiNote body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1alpha1/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNoteValidateBeforeCall(String name, ApiNote body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateNote(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNote(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNoteCall(name, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates an existing &#x60;Note&#x60;.
     * 
     * @param name  (required)
     * @param body  (required)
     * @return ApiNote
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiNote updateNote(String name, ApiNote body) throws ApiException {
        ApiResponse<ApiNote> resp = updateNoteWithHttpInfo(name, body);
        return resp.getData();
    }

    /**
     * Updates an existing &#x60;Note&#x60;.
     * 
     * @param name  (required)
     * @param body  (required)
     * @return ApiResponse&lt;ApiNote&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiNote> updateNoteWithHttpInfo(String name, ApiNote body) throws ApiException {
        com.squareup.okhttp.Call call = updateNoteValidateBeforeCall(name, body, null, null);
        Type localVarReturnType = new TypeToken<ApiNote>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates an existing &#x60;Note&#x60;. (asynchronously)
     * 
     * @param name  (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNoteAsync(String name, ApiNote body, final ApiCallback<ApiNote> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNoteValidateBeforeCall(name, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiNote>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
