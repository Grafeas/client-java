/**
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.grafeas.client;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * Layer holds metadata specific to a layer of a Docker image.
 */
@ApiModel(description = "Layer holds metadata specific to a layer of a Docker image.")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-08T14:44:14.136-04:00")
public class Layer   {
  /**
   * The recovered Dockerfile directive used to construct this layer.
   */
  public enum DirectiveEnum {
    @SerializedName("UNKNOWN_DIRECTIVE")
    UNKNOWN_DIRECTIVE("UNKNOWN_DIRECTIVE"),
    
    @SerializedName("MAINTAINER")
    MAINTAINER("MAINTAINER"),
    
    @SerializedName("RUN")
    RUN("RUN"),
    
    @SerializedName("CMD")
    CMD("CMD"),
    
    @SerializedName("LABEL")
    LABEL("LABEL"),
    
    @SerializedName("EXPOSE")
    EXPOSE("EXPOSE"),
    
    @SerializedName("ENV")
    ENV("ENV"),
    
    @SerializedName("ADD")
    ADD("ADD"),
    
    @SerializedName("COPY")
    COPY("COPY"),
    
    @SerializedName("ENTRYPOINT")
    ENTRYPOINT("ENTRYPOINT"),
    
    @SerializedName("VOLUME")
    VOLUME("VOLUME"),
    
    @SerializedName("USER")
    USER("USER"),
    
    @SerializedName("WORKDIR")
    WORKDIR("WORKDIR"),
    
    @SerializedName("ARG")
    ARG("ARG"),
    
    @SerializedName("ONBUILD")
    ONBUILD("ONBUILD"),
    
    @SerializedName("STOPSIGNAL")
    STOPSIGNAL("STOPSIGNAL"),
    
    @SerializedName("HEALTHCHECK")
    HEALTHCHECK("HEALTHCHECK"),
    
    @SerializedName("SHELL")
    SHELL("SHELL");

    private String value;

    DirectiveEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("directive")
  private DirectiveEnum directive = null;

  @SerializedName("arguments")
  private String arguments = null;

  public Layer directive(DirectiveEnum directive) {
    this.directive = directive;
    return this;
  }

   /**
   * The recovered Dockerfile directive used to construct this layer.
   * @return directive
  **/
  @ApiModelProperty(example = "null", value = "The recovered Dockerfile directive used to construct this layer.")
  public DirectiveEnum getDirective() {
    return directive;
  }

  public void setDirective(DirectiveEnum directive) {
    this.directive = directive;
  }

  public Layer arguments(String arguments) {
    this.arguments = arguments;
    return this;
  }

   /**
   * The recovered arguments to the Dockerfile directive.
   * @return arguments
  **/
  @ApiModelProperty(example = "null", value = "The recovered arguments to the Dockerfile directive.")
  public String getArguments() {
    return arguments;
  }

  public void setArguments(String arguments) {
    this.arguments = arguments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Layer layer = (Layer) o;
    return Objects.equals(this.directive, layer.directive) &&
        Objects.equals(this.arguments, layer.arguments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directive, arguments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Layer {\n");
    
    sb.append("    directive: ").append(toIndentedString(directive)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

