/**
 * Grafeas API
 * An API to insert and retrieve annotations on cloud artifacts.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.grafeas.client;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * Message encapsulating signature of the verified build
 */
@ApiModel(description = "Message encapsulating signature of the verified build")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-08T14:44:14.136-04:00")
public class BuildSignature   {
  @SerializedName("publicKey")
  private String publicKey = null;

  @SerializedName("signature")
  private String signature = null;

  @SerializedName("keyId")
  private String keyId = null;

  /**
   * The type of the key, either stored in `public_key` or referenced in `key_id`
   */
  public enum KeyTypeEnum {
    @SerializedName("UNSET")
    UNSET("UNSET"),
    
    @SerializedName("PGP_ASCII_ARMORED")
    PGP_ASCII_ARMORED("PGP_ASCII_ARMORED"),
    
    @SerializedName("PKIX_PEM")
    PKIX_PEM("PKIX_PEM");

    private String value;

    KeyTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("keyType")
  private KeyTypeEnum keyType = null;

  public BuildSignature publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

   /**
   * Public key of the builder which can be used to verify that related Findings are valid and unchanged.  If `key_type` is empty this defaults to PEM encoded public keys.  This field may be empty if `key_id` references an external key.  For Cloud Container Builder based signatures this is a PEM encoded public key. To verify the Cloud Container Builder signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from BuildDetails are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
   * @return publicKey
  **/
  @ApiModelProperty(example = "null", value = "Public key of the builder which can be used to verify that related Findings are valid and unchanged.  If `key_type` is empty this defaults to PEM encoded public keys.  This field may be empty if `key_id` references an external key.  For Cloud Container Builder based signatures this is a PEM encoded public key. To verify the Cloud Container Builder signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from BuildDetails are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`")
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }

  public BuildSignature signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * Signature of the related BuildProvenance, encoded in a base64 string.
   * @return signature
  **/
  @ApiModelProperty(example = "null", value = "Signature of the related BuildProvenance, encoded in a base64 string.")
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }

  public BuildSignature keyId(String keyId) {
    this.keyId = keyId;
    return this;
  }

   /**
   * An ID for the key used to sign.  This could be either an ID for the key stored in `public_key` (e.g., the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (e.g., a reference to a key in Cloud KMS).
   * @return keyId
  **/
  @ApiModelProperty(example = "null", value = "An ID for the key used to sign.  This could be either an ID for the key stored in `public_key` (e.g., the ID or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (e.g., a reference to a key in Cloud KMS).")
  public String getKeyId() {
    return keyId;
  }

  public void setKeyId(String keyId) {
    this.keyId = keyId;
  }

  public BuildSignature keyType(KeyTypeEnum keyType) {
    this.keyType = keyType;
    return this;
  }

   /**
   * The type of the key, either stored in `public_key` or referenced in `key_id`
   * @return keyType
  **/
  @ApiModelProperty(example = "null", value = "The type of the key, either stored in `public_key` or referenced in `key_id`")
  public KeyTypeEnum getKeyType() {
    return keyType;
  }

  public void setKeyType(KeyTypeEnum keyType) {
    this.keyType = keyType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildSignature buildSignature = (BuildSignature) o;
    return Objects.equals(this.publicKey, buildSignature.publicKey) &&
        Objects.equals(this.signature, buildSignature.signature) &&
        Objects.equals(this.keyId, buildSignature.keyId) &&
        Objects.equals(this.keyType, buildSignature.keyType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(publicKey, signature, keyId, keyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildSignature {\n");
    
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

